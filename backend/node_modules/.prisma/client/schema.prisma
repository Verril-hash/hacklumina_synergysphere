generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  name          String?
  projects      ProjectMember[]
  tasks         Task[]          @relation("assignee")
  discussions   Discussion[]
  notifications Notification[]
  moodPulses    MoodPulse[]
  standups      Standup[]
}

model Project {
  id            Int             @id @default(autoincrement())
  name          String
  members       ProjectMember[]
  tasks         Task[]
  discussions   Discussion[]
  notifications Notification[]
}

model ProjectMember {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int
  role      String? // e.g., "admin", "member"
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  assigneeId   Int?
  dueDate      DateTime?
  status       String    @default("To-Do") // "To-Do", "In Progress", "Done"
  projectId    Int
  dependencies String? // JSON string of task IDs
  timeline     String? // JSON string of timeline events
  assignee     User?     @relation("assignee", fields: [assigneeId], references: [id])
  project      Project   @relation(fields: [projectId], references: [id])
}

model Discussion {
  id        Int          @id @default(autoincrement())
  message   String
  userId    Int
  projectId Int
  parentId  Int? // for threading
  user      User         @relation(fields: [userId], references: [id])
  project   Project      @relation(fields: [projectId], references: [id])
  parent    Discussion?  @relation("threads", fields: [parentId], references: [id])
  children  Discussion[] @relation("threads")
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  userId    Int
  projectId Int?
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
}

model MoodPulse {
  id     Int      @id @default(autoincrement())
  emoji  String // e.g., "ðŸ™‚"
  userId Int
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])
}

model Standup {
  id     Int      @id @default(autoincrement())
  update String // "What I did / Blockers / Next"
  userId Int
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])
}
